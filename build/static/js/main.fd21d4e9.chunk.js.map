{"version":3,"sources":["components/home-page/HomePage.style.jsx","components/home-page/result-page/ResultPage.style.jsx","components/home-page/result-page/ResultPage.jsx","components/home-page/HomePage.jsx","components/login-page/LoginPage.style.jsx","App.js","reportWebVitals.js","index.js"],"names":["StyledHomePage","styled","div","StyledSeacrhBox","StyledHeading","h1","StyledGrid","StyledGridItem","ResultPage","props","useState","selectedAnime","setSelectedAnime","console","log","resultItems","length","map","item","className","style","width","onClick","src","cover_image","alt","height","titles","en","href","trailer_url","genres","index","descriptions","Math","round","score","season_year","episodes_count","anilist_id","searchOptions","HomePage","animeData","setAnimeData","selectedOption","setSelectedOption","searchInput","setSearchInput","setResultItems","useEffect","a","axios","get","data","documents","type","value","onChange","e","target","class","filter","toLowerCase","includes","flag","forEach","i","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd21d4e9.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledHomePage = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-width: 712px;\n`;\n\nexport const StyledSeacrhBox = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  width: 100%;\n  min-height: 200px;\n  padding-left: 20px;\n  padding-right: 20px;\n  border: 1px solid black;\n\n  .search-btn{\n      width: 150px;\n      margin-top: 10px;\n  }\n`;\n\nexport const StyledHeading = styled.h1``;\n\n","import styled from \"styled-components\";\n\nexport const StyledGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 20px;\n  width: 100%;\n  min-width: 712px;\n`;\n\nexport const StyledGridItem = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 4px;\n  &:hover {\n    cursor: pointer;\n  }\n\n  .card-title {\n    min-height: 48px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n  }\n\n  .card-text {\n    text-align: left;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: 5;\n    -webkit-box-orient: vertical;\n  }\n\n  .card-body {\n    padding: 10px;\n  }\n`;\n","import React, { useState } from \"react\";\nimport { StyledGrid, StyledGridItem } from \"./ResultPage.style\";\n\nfunction ResultPage(props) {\n  const [selectedAnime, setSelectedAnime] = useState();\n  console.log(\"selected\", selectedAnime);\n\n  return (\n    <StyledGrid>\n      {props.resultItems.length ? (\n        props.resultItems.map((item) => {\n          return (\n            <StyledGridItem\n              key={item.anilist_id}\n              className=\"card\"\n              style={{ width: \"14rem\" }}\n              onClick={()=>{\n                  setSelectedAnime(item);\n              }}\n            >\n              <img\n                className=\"card-img-top\"\n                src={item.cover_image}\n                alt=\"\"\n                style={{ height: \"318px\" }}\n              />\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{item.titles.en}</h5>\n                <p className=\"card-text\">\n                  <strong>Trailer: </strong>\n                  <a href={item.trailer_url}>\n                    {item.trailer_url ? \"Link\" : \"N/A\"}\n                  </a>\n                </p>\n                <p className=\"card-text\">\n                  <strong>Genres: </strong>\n                  {item.genres.map((item, index) => {\n                    return `${item}${index!==item.length-1?', ':'.'}`;\n                  })}\n                </p>\n                <p className=\"card-text\">\n                  <strong>Description: </strong>\n                  {item.descriptions.en ? item.descriptions.en : \"N/A\"}\n                </p>\n                <p className=\"card-text\">\n                  <strong>Rating: </strong>\n                  {Math.round((item.score / 20) * 10) / 10}\n                </p>\n                <p className=\"card-text\">\n                  <strong>Season Year: </strong>\n                  {item.season_year}\n                </p>\n                <p className=\"card-text\">\n                  <strong>No. of Episodes: </strong>\n                  {item.episodes_count}\n                </p>\n              </div>\n            </StyledGridItem>\n          );\n        })\n      ) : (\n        <h1>No Results Found!</h1>\n      )}\n    </StyledGrid>\n  );\n}\n\nexport default ResultPage;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport {\n  StyledHeading,\n  StyledHomePage,\n  StyledSeacrhBox,\n} from \"./HomePage.style\";\nimport ResultPage from \"./result-page/ResultPage\";\n\nconst searchOptions = [\"Title\", \"Genre\", \"Description\"];\n\nfunction HomePage() {\n  const [animeData, setAnimeData] = useState([]);\n  const [selectedOption, setSelectedOption] = useState(searchOptions[0]);\n  const [searchInput, setSearchInput] = useState();\n  const [resultItems, setResultItems] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const data = (await axios.get(\"https://api.aniapi.com/v1/anime/\")).data\n          .data;\n        console.log(\"data\", data);\n        console.log(data.documents);\n        setAnimeData(data.documents);\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }, []);\n\n  const searchHandler = () => {\n    if (searchInput) {\n      const data = animeData.filter((item) => {\n        if (selectedOption === searchOptions[0]) {\n          return item.titles.en\n            .toLowerCase()\n            .includes(searchInput.toLowerCase());\n        }\n        if (selectedOption === searchOptions[1]) {\n          let flag = false;\n          item.genres.forEach((i) => {\n            if (i.toLowerCase() === searchInput.toLowerCase()) {\n              flag = true;\n            }\n          });\n          return flag;\n        }\n        if (selectedOption === searchOptions[2]) {\n          return item.descriptions.en\n            .toLowerCase()\n            .includes(searchInput.toLowerCase());\n        }\n        return false;\n      });\n      setResultItems(data);\n    }\n  };\n  return (\n    <StyledHomePage>\n      <StyledSeacrhBox>\n        <StyledHeading>Search Anime</StyledHeading>\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={searchInput}\n            onChange={(e) => {\n              setSearchInput(e.target.value);\n            }}\n            className=\"form-control\"\n            aria-label=\"Text input with dropdown button\"\n          />\n          <div class=\"input-group-append\">\n            <button\n              className=\"btn btn-outline-secondary dropdown-toggle\"\n              type=\"button\"\n              data-toggle=\"dropdown\"\n              aria-haspopup=\"true\"\n              aria-expanded=\"false\"\n            >\n              {selectedOption}\n            </button>\n            <div className=\"dropdown-menu\">\n              {searchOptions.map((item) => {\n                return (\n                  <span\n                    key={item}\n                    className=\"dropdown-item\"\n                    onClick={() => {\n                      setSelectedOption(item);\n                    }}\n                  >\n                    {item}\n                  </span>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n        <button className=\"btn btn-primary search-btn\" onClick={searchHandler}>\n          Search\n        </button>\n      </StyledSeacrhBox>\n      {<ResultPage\n        resultItems={resultItems}\n        searchInput={searchInput}\n      ></ResultPage>}\n    </StyledHomePage>\n  );\n}\n\nexport default HomePage;\n","import styled from \"styled-components\";\n\nexport const StyledLoginPage= styled.div`\ndisplay: flex;\n`;","import { useState } from \"react\";\nimport \"./App.css\";\nimport HomePage from \"./components/home-page/HomePage\";\nimport LoginPage from \"./components/login-page/LoginPage\";\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  return <div className=\"App\">\n    {/* {isLoggedIn?<HomePage />: <LoginPage setIsLoggedIn={setIsLoggedIn}/> } */}\n    <HomePage />\n  </div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}